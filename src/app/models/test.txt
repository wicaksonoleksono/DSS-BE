import numpy as np

class CalculationUtils:
    @staticmethod
    def normalize_column(column, criterion_type):
        """
        Normalisasi kolom berdasarkan tipe kriteria: 'cost' atau 'benefit'.
        """
        if criterion_type == "cost":
            min_value = column.min()
            if min_value == 0:
                raise ValueError("Minimum value for cost criterion is zero, cannot divide by zero.")
            return min_value / column
        elif criterion_type == "benefit":
            max_value = column.max()
            if max_value == 0:
                raise ValueError("Maximum value for benefit criterion is zero, cannot divide by zero.")
            return column / max_value
        else:
            raise ValueError(f"Unknown criterion type '{criterion_type}'.")

class CalculationModel:
    def __init__(self, db_connection) -> None:
        self.db_connection = db_connection

    def simple_additive_weighting(self, criteria_weights, decision_matrix, criteria_types) -> any:
        # Validasi input menggunakan helper function
        criteria_weights, decision_matrix = self._validate_input(criteria_weights, decision_matrix)

        # Normalisasi matriks berdasarkan tipe kriteria
        normalized_matrix = self._normalize_matrix(decision_matrix, criteria_types)

        # Kalikan matriks normalisasi dengan bobot kriteria
        weighted_matrix = normalized_matrix * criteria_weights
        print("Weighted Matrix:\n", weighted_matrix)

        # Jumlahkan setiap baris untuk mendapatkan skor per alternatif
        scores = weighted_matrix.sum(axis=1)
        print("Scores:", scores)

        # Panggil fungsi penyimpanan
        self._save_results("simple_additive_weighting", criteria_weights, decision_matrix, scores)
        return scores

    def weighted_product(self, criteria_weights, decision_matrix, criteria_types) -> any:
        # Validasi input
        criteria_weights, decision_matrix = self._validate_input(criteria_weights, decision_matrix)

        # Normalisasi bobot kriteria
        criteria_weights /= criteria_weights.sum()
        print("Criteria Weights (after normalization):", criteria_weights)

        # Perhitungan WP
        powered_matrix = self._calculate_weighted_product(decision_matrix, criteria_weights, criteria_types)
        
        # Kalikan semua elemen per baris untuk mendapatkan skor
        scores = powered_matrix.prod(axis=1)
        scores /= scores.sum()
        print("Normalized Scores:", scores)

        # Panggil fungsi penyimpanan
        self._save_results("weighted_product", criteria_weights, decision_matrix, scores)
        return scores

    def _normalize_matrix(self, decision_matrix, criteria_types):
        """
        Normalisasi matriks keputusan berdasarkan jenis kriteria.
        """
        normalized_matrix = np.zeros_like(decision_matrix, dtype=float)
        for i, criterion_type in enumerate(criteria_types):
            normalized_matrix[:, i] = CalculationUtils.normalize_column(decision_matrix[:, i], criterion_type)
        print("Normalized Matrix:\n", normalized_matrix)
        return normalized_matrix

    def _calculate_weighted_product(self, decision_matrix, criteria_weights, criteria_types):
        """
        Menghitung weighted product dari matriks keputusan.
        """
        powered_matrix = np.zeros_like(decision_matrix, dtype=float)
        for i, criterion_type in enumerate(criteria_types):
            column = decision_matrix[:, i]
            if criterion_type == "cost":
                if np.any(column == 0):
                    raise ValueError(f"Zero value found in cost criterion at index {i}, cannot divide by zero.")
                powered_column = np.power(1 / column, criteria_weights[i])
            elif criterion_type == "benefit":
                powered_column = np.power(column, criteria_weights[i])
            else:
                raise ValueError(f"Unknown criterion type '{criterion_type}' at index {i}.")
            powered_matrix[:, i] = powered_column
        print("Powered Matrix:\n", powered_matrix)
        return powered_matrix

    def _validate_input(self, criteria_weights, decision_matrix):
        """
        Validasi input dari matriks keputusan dan bobot kriteria.
        """
        criteria_weights = np.array(criteria_weights, dtype=float)
        decision_matrix = np.array(decision_matrix, dtype=float)

        if len(criteria_weights) != decision_matrix.shape[1]:
            raise ValueError("The number of criteria weights must match the number of columns in the decision matrix.")
        return criteria_weights, decision_matrix

    def _save_results(self, method_name, criteria_weights, decision_matrix, scores):
        """
        Simpan hasil kalkulasi ke database.
        """
        decision_matrix_str = json.dumps(decision_matrix.tolist())
        data = {
            "method": method_name,
            "criteria_weights": criteria_weights.tolist(),
            "decision_matrix": decision_matrix_str,
            "scores": scores.tolist(),
        }
        self.db_connection.add(data)
